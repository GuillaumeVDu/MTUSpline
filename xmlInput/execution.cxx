// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "execution.hxx"

// TendonElementType
// 


// TendonType
// 

const TendonType::stiff_optional& TendonType::
stiff () const
{
  return this->stiff_;
}

TendonType::stiff_optional& TendonType::
stiff ()
{
  return this->stiff_;
}

void TendonType::
stiff (const stiff_type& x)
{
  this->stiff_.set (x);
}

void TendonType::
stiff (const stiff_optional& x)
{
  this->stiff_ = x;
}

void TendonType::
stiff (::std::auto_ptr< stiff_type > x)
{
  this->stiff_.set (x);
}

const TendonType::elastic_optional& TendonType::
elastic () const
{
  return this->elastic_;
}

TendonType::elastic_optional& TendonType::
elastic ()
{
  return this->elastic_;
}

void TendonType::
elastic (const elastic_type& x)
{
  this->elastic_.set (x);
}

void TendonType::
elastic (const elastic_optional& x)
{
  this->elastic_ = x;
}

void TendonType::
elastic (::std::auto_ptr< elastic_type > x)
{
  this->elastic_.set (x);
}

const TendonType::elasticBiSec_optional& TendonType::
elasticBiSec () const
{
  return this->elasticBiSec_;
}

TendonType::elasticBiSec_optional& TendonType::
elasticBiSec ()
{
  return this->elasticBiSec_;
}

void TendonType::
elasticBiSec (const elasticBiSec_type& x)
{
  this->elasticBiSec_.set (x);
}

void TendonType::
elasticBiSec (const elasticBiSec_optional& x)
{
  this->elasticBiSec_ = x;
}

void TendonType::
elasticBiSec (::std::auto_ptr< elasticBiSec_type > x)
{
  this->elasticBiSec_.set (x);
}


// ActivationElementType
// 


// ActivationType
// 

const ActivationType::exponential_optional& ActivationType::
exponential () const
{
  return this->exponential_;
}

ActivationType::exponential_optional& ActivationType::
exponential ()
{
  return this->exponential_;
}

void ActivationType::
exponential (const exponential_type& x)
{
  this->exponential_.set (x);
}

void ActivationType::
exponential (const exponential_optional& x)
{
  this->exponential_ = x;
}

void ActivationType::
exponential (::std::auto_ptr< exponential_type > x)
{
  this->exponential_.set (x);
}

const ActivationType::piecewise_optional& ActivationType::
piecewise () const
{
  return this->piecewise_;
}

ActivationType::piecewise_optional& ActivationType::
piecewise ()
{
  return this->piecewise_;
}

void ActivationType::
piecewise (const piecewise_type& x)
{
  this->piecewise_.set (x);
}

void ActivationType::
piecewise (const piecewise_optional& x)
{
  this->piecewise_ = x;
}

void ActivationType::
piecewise (::std::auto_ptr< piecewise_type > x)
{
  this->piecewise_.set (x);
}


// HybridAlgorithmSimulatedAnnealingType
// 

const HybridAlgorithmSimulatedAnnealingType::noEpsilon_type& HybridAlgorithmSimulatedAnnealingType::
noEpsilon () const
{
  return this->noEpsilon_.get ();
}

HybridAlgorithmSimulatedAnnealingType::noEpsilon_type& HybridAlgorithmSimulatedAnnealingType::
noEpsilon ()
{
  return this->noEpsilon_.get ();
}

void HybridAlgorithmSimulatedAnnealingType::
noEpsilon (const noEpsilon_type& x)
{
  this->noEpsilon_.set (x);
}

const HybridAlgorithmSimulatedAnnealingType::rt_type& HybridAlgorithmSimulatedAnnealingType::
rt () const
{
  return this->rt_.get ();
}

HybridAlgorithmSimulatedAnnealingType::rt_type& HybridAlgorithmSimulatedAnnealingType::
rt ()
{
  return this->rt_.get ();
}

void HybridAlgorithmSimulatedAnnealingType::
rt (const rt_type& x)
{
  this->rt_.set (x);
}

const HybridAlgorithmSimulatedAnnealingType::T_type& HybridAlgorithmSimulatedAnnealingType::
T () const
{
  return this->T_.get ();
}

HybridAlgorithmSimulatedAnnealingType::T_type& HybridAlgorithmSimulatedAnnealingType::
T ()
{
  return this->T_.get ();
}

void HybridAlgorithmSimulatedAnnealingType::
T (const T_type& x)
{
  this->T_.set (x);
}

const HybridAlgorithmSimulatedAnnealingType::NS_type& HybridAlgorithmSimulatedAnnealingType::
NS () const
{
  return this->NS_.get ();
}

HybridAlgorithmSimulatedAnnealingType::NS_type& HybridAlgorithmSimulatedAnnealingType::
NS ()
{
  return this->NS_.get ();
}

void HybridAlgorithmSimulatedAnnealingType::
NS (const NS_type& x)
{
  this->NS_.set (x);
}

const HybridAlgorithmSimulatedAnnealingType::NT_type& HybridAlgorithmSimulatedAnnealingType::
NT () const
{
  return this->NT_.get ();
}

HybridAlgorithmSimulatedAnnealingType::NT_type& HybridAlgorithmSimulatedAnnealingType::
NT ()
{
  return this->NT_.get ();
}

void HybridAlgorithmSimulatedAnnealingType::
NT (const NT_type& x)
{
  this->NT_.set (x);
}

const HybridAlgorithmSimulatedAnnealingType::epsilon_type& HybridAlgorithmSimulatedAnnealingType::
epsilon () const
{
  return this->epsilon_.get ();
}

HybridAlgorithmSimulatedAnnealingType::epsilon_type& HybridAlgorithmSimulatedAnnealingType::
epsilon ()
{
  return this->epsilon_.get ();
}

void HybridAlgorithmSimulatedAnnealingType::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

const HybridAlgorithmSimulatedAnnealingType::maxNoEval_type& HybridAlgorithmSimulatedAnnealingType::
maxNoEval () const
{
  return this->maxNoEval_.get ();
}

HybridAlgorithmSimulatedAnnealingType::maxNoEval_type& HybridAlgorithmSimulatedAnnealingType::
maxNoEval ()
{
  return this->maxNoEval_.get ();
}

void HybridAlgorithmSimulatedAnnealingType::
maxNoEval (const maxNoEval_type& x)
{
  this->maxNoEval_.set (x);
}


// HybridAlgorithmType
// 

const HybridAlgorithmType::hybridSimulatedAnnealing_type& HybridAlgorithmType::
hybridSimulatedAnnealing () const
{
  return this->hybridSimulatedAnnealing_.get ();
}

HybridAlgorithmType::hybridSimulatedAnnealing_type& HybridAlgorithmType::
hybridSimulatedAnnealing ()
{
  return this->hybridSimulatedAnnealing_.get ();
}

void HybridAlgorithmType::
hybridSimulatedAnnealing (const hybridSimulatedAnnealing_type& x)
{
  this->hybridSimulatedAnnealing_.set (x);
}

void HybridAlgorithmType::
hybridSimulatedAnnealing (::std::auto_ptr< hybridSimulatedAnnealing_type > x)
{
  this->hybridSimulatedAnnealing_.set (x);
}


// OpenLoopType
// 


// MuscleListType
//

MuscleListType::
MuscleListType ()
: ::xsd::cxx::tree::list< ::xml_schema::string, char > (this)
{
}

MuscleListType::
MuscleListType (size_type n, const ::xml_schema::string& x)
: ::xsd::cxx::tree::list< ::xml_schema::string, char > (n, x, this)
{
}

MuscleListType::
MuscleListType (const MuscleListType& o,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::simple_type (o, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::string, char > (o, f, this)
{
}

// HybridType
// 

const HybridType::alpha_type& HybridType::
alpha () const
{
  return this->alpha_.get ();
}

HybridType::alpha_type& HybridType::
alpha ()
{
  return this->alpha_.get ();
}

void HybridType::
alpha (const alpha_type& x)
{
  this->alpha_.set (x);
}

const HybridType::beta_type& HybridType::
beta () const
{
  return this->beta_.get ();
}

HybridType::beta_type& HybridType::
beta ()
{
  return this->beta_.get ();
}

void HybridType::
beta (const beta_type& x)
{
  this->beta_.set (x);
}

const HybridType::gamma_type& HybridType::
gamma () const
{
  return this->gamma_.get ();
}

HybridType::gamma_type& HybridType::
gamma ()
{
  return this->gamma_.get ();
}

void HybridType::
gamma (const gamma_type& x)
{
  this->gamma_.set (x);
}

const HybridType::trackedMuscles_type& HybridType::
trackedMuscles () const
{
  return this->trackedMuscles_.get ();
}

HybridType::trackedMuscles_type& HybridType::
trackedMuscles ()
{
  return this->trackedMuscles_.get ();
}

void HybridType::
trackedMuscles (const trackedMuscles_type& x)
{
  this->trackedMuscles_.set (x);
}

void HybridType::
trackedMuscles (::std::auto_ptr< trackedMuscles_type > x)
{
  this->trackedMuscles_.set (x);
}

const HybridType::predictedMuscles_type& HybridType::
predictedMuscles () const
{
  return this->predictedMuscles_.get ();
}

HybridType::predictedMuscles_type& HybridType::
predictedMuscles ()
{
  return this->predictedMuscles_.get ();
}

void HybridType::
predictedMuscles (const predictedMuscles_type& x)
{
  this->predictedMuscles_.set (x);
}

void HybridType::
predictedMuscles (::std::auto_ptr< predictedMuscles_type > x)
{
  this->predictedMuscles_.set (x);
}

const HybridType::algorithm_type& HybridType::
algorithm () const
{
  return this->algorithm_.get ();
}

HybridType::algorithm_type& HybridType::
algorithm ()
{
  return this->algorithm_.get ();
}

void HybridType::
algorithm (const algorithm_type& x)
{
  this->algorithm_.set (x);
}

void HybridType::
algorithm (::std::auto_ptr< algorithm_type > x)
{
  this->algorithm_.set (x);
}


// DevicePluginType
// 

const DevicePluginType::EMGDevice_optional& DevicePluginType::
EMGDevice () const
{
  return this->EMGDevice_;
}

DevicePluginType::EMGDevice_optional& DevicePluginType::
EMGDevice ()
{
  return this->EMGDevice_;
}

void DevicePluginType::
EMGDevice (const EMGDevice_type& x)
{
  this->EMGDevice_.set (x);
}

void DevicePluginType::
EMGDevice (const EMGDevice_optional& x)
{
  this->EMGDevice_ = x;
}

void DevicePluginType::
EMGDevice (::std::auto_ptr< EMGDevice_type > x)
{
  this->EMGDevice_.set (x);
}

const DevicePluginType::EMGDeviceFile_optional& DevicePluginType::
EMGDeviceFile () const
{
  return this->EMGDeviceFile_;
}

DevicePluginType::EMGDeviceFile_optional& DevicePluginType::
EMGDeviceFile ()
{
  return this->EMGDeviceFile_;
}

void DevicePluginType::
EMGDeviceFile (const EMGDeviceFile_type& x)
{
  this->EMGDeviceFile_.set (x);
}

void DevicePluginType::
EMGDeviceFile (const EMGDeviceFile_optional& x)
{
  this->EMGDeviceFile_ = x;
}

void DevicePluginType::
EMGDeviceFile (::std::auto_ptr< EMGDeviceFile_type > x)
{
  this->EMGDeviceFile_.set (x);
}

const DevicePluginType::AngleDevice_optional& DevicePluginType::
AngleDevice () const
{
  return this->AngleDevice_;
}

DevicePluginType::AngleDevice_optional& DevicePluginType::
AngleDevice ()
{
  return this->AngleDevice_;
}

void DevicePluginType::
AngleDevice (const AngleDevice_type& x)
{
  this->AngleDevice_.set (x);
}

void DevicePluginType::
AngleDevice (const AngleDevice_optional& x)
{
  this->AngleDevice_ = x;
}

void DevicePluginType::
AngleDevice (::std::auto_ptr< AngleDevice_type > x)
{
  this->AngleDevice_.set (x);
}

const DevicePluginType::AngleDeviceFile_optional& DevicePluginType::
AngleDeviceFile () const
{
  return this->AngleDeviceFile_;
}

DevicePluginType::AngleDeviceFile_optional& DevicePluginType::
AngleDeviceFile ()
{
  return this->AngleDeviceFile_;
}

void DevicePluginType::
AngleDeviceFile (const AngleDeviceFile_type& x)
{
  this->AngleDeviceFile_.set (x);
}

void DevicePluginType::
AngleDeviceFile (const AngleDeviceFile_optional& x)
{
  this->AngleDeviceFile_ = x;
}

void DevicePluginType::
AngleDeviceFile (::std::auto_ptr< AngleDeviceFile_type > x)
{
  this->AngleDeviceFile_.set (x);
}

const DevicePluginType::TorqueDevice_optional& DevicePluginType::
TorqueDevice () const
{
  return this->TorqueDevice_;
}

DevicePluginType::TorqueDevice_optional& DevicePluginType::
TorqueDevice ()
{
  return this->TorqueDevice_;
}

void DevicePluginType::
TorqueDevice (const TorqueDevice_type& x)
{
  this->TorqueDevice_.set (x);
}

void DevicePluginType::
TorqueDevice (const TorqueDevice_optional& x)
{
  this->TorqueDevice_ = x;
}

void DevicePluginType::
TorqueDevice (::std::auto_ptr< TorqueDevice_type > x)
{
  this->TorqueDevice_.set (x);
}

const DevicePluginType::TorqueDeviceFile_optional& DevicePluginType::
TorqueDeviceFile () const
{
  return this->TorqueDeviceFile_;
}

DevicePluginType::TorqueDeviceFile_optional& DevicePluginType::
TorqueDeviceFile ()
{
  return this->TorqueDeviceFile_;
}

void DevicePluginType::
TorqueDeviceFile (const TorqueDeviceFile_type& x)
{
  this->TorqueDeviceFile_.set (x);
}

void DevicePluginType::
TorqueDeviceFile (const TorqueDeviceFile_optional& x)
{
  this->TorqueDeviceFile_ = x;
}

void DevicePluginType::
TorqueDeviceFile (::std::auto_ptr< TorqueDeviceFile_type > x)
{
  this->TorqueDeviceFile_.set (x);
}

const DevicePluginType::ComsumerDevice_optional& DevicePluginType::
ComsumerDevice () const
{
  return this->ComsumerDevice_;
}

DevicePluginType::ComsumerDevice_optional& DevicePluginType::
ComsumerDevice ()
{
  return this->ComsumerDevice_;
}

void DevicePluginType::
ComsumerDevice (const ComsumerDevice_type& x)
{
  this->ComsumerDevice_.set (x);
}

void DevicePluginType::
ComsumerDevice (const ComsumerDevice_optional& x)
{
  this->ComsumerDevice_ = x;
}

void DevicePluginType::
ComsumerDevice (::std::auto_ptr< ComsumerDevice_type > x)
{
  this->ComsumerDevice_.set (x);
}

const DevicePluginType::ComsumerPort_optional& DevicePluginType::
ComsumerPort () const
{
  return this->ComsumerPort_;
}

DevicePluginType::ComsumerPort_optional& DevicePluginType::
ComsumerPort ()
{
  return this->ComsumerPort_;
}

void DevicePluginType::
ComsumerPort (const ComsumerPort_type& x)
{
  this->ComsumerPort_.set (x);
}

void DevicePluginType::
ComsumerPort (const ComsumerPort_optional& x)
{
  this->ComsumerPort_ = x;
}

void DevicePluginType::
ComsumerPort (::std::auto_ptr< ComsumerPort_type > x)
{
  this->ComsumerPort_.set (x);
}

const DevicePluginType::EMGAndAngleDevice_optional& DevicePluginType::
EMGAndAngleDevice () const
{
  return this->EMGAndAngleDevice_;
}

DevicePluginType::EMGAndAngleDevice_optional& DevicePluginType::
EMGAndAngleDevice ()
{
  return this->EMGAndAngleDevice_;
}

void DevicePluginType::
EMGAndAngleDevice (const EMGAndAngleDevice_type& x)
{
  this->EMGAndAngleDevice_.set (x);
}

void DevicePluginType::
EMGAndAngleDevice (const EMGAndAngleDevice_optional& x)
{
  this->EMGAndAngleDevice_ = x;
}

void DevicePluginType::
EMGAndAngleDevice (::std::auto_ptr< EMGAndAngleDevice_type > x)
{
  this->EMGAndAngleDevice_.set (x);
}

const DevicePluginType::OptimizationDevice_optional& DevicePluginType::
OptimizationDevice () const
{
  return this->OptimizationDevice_;
}

DevicePluginType::OptimizationDevice_optional& DevicePluginType::
OptimizationDevice ()
{
  return this->OptimizationDevice_;
}

void DevicePluginType::
OptimizationDevice (const OptimizationDevice_type& x)
{
  this->OptimizationDevice_.set (x);
}

void DevicePluginType::
OptimizationDevice (const OptimizationDevice_optional& x)
{
  this->OptimizationDevice_ = x;
}

void DevicePluginType::
OptimizationDevice (::std::auto_ptr< OptimizationDevice_type > x)
{
  this->OptimizationDevice_.set (x);
}

const DevicePluginType::OptimizationFile_optional& DevicePluginType::
OptimizationFile () const
{
  return this->OptimizationFile_;
}

DevicePluginType::OptimizationFile_optional& DevicePluginType::
OptimizationFile ()
{
  return this->OptimizationFile_;
}

void DevicePluginType::
OptimizationFile (const OptimizationFile_type& x)
{
  this->OptimizationFile_.set (x);
}

void DevicePluginType::
OptimizationFile (const OptimizationFile_optional& x)
{
  this->OptimizationFile_ = x;
}

void DevicePluginType::
OptimizationFile (::std::auto_ptr< OptimizationFile_type > x)
{
  this->OptimizationFile_.set (x);
}

const DevicePluginType::AngleAndComsumerDevice_optional& DevicePluginType::
AngleAndComsumerDevice () const
{
  return this->AngleAndComsumerDevice_;
}

DevicePluginType::AngleAndComsumerDevice_optional& DevicePluginType::
AngleAndComsumerDevice ()
{
  return this->AngleAndComsumerDevice_;
}

void DevicePluginType::
AngleAndComsumerDevice (const AngleAndComsumerDevice_type& x)
{
  this->AngleAndComsumerDevice_.set (x);
}

void DevicePluginType::
AngleAndComsumerDevice (const AngleAndComsumerDevice_optional& x)
{
  this->AngleAndComsumerDevice_ = x;
}

void DevicePluginType::
AngleAndComsumerDevice (::std::auto_ptr< AngleAndComsumerDevice_type > x)
{
  this->AngleAndComsumerDevice_.set (x);
}


// RealTimeType
// 

const RealTimeType::openLoop_optional& RealTimeType::
openLoop () const
{
  return this->openLoop_;
}

RealTimeType::openLoop_optional& RealTimeType::
openLoop ()
{
  return this->openLoop_;
}

void RealTimeType::
openLoop (const openLoop_type& x)
{
  this->openLoop_.set (x);
}

void RealTimeType::
openLoop (const openLoop_optional& x)
{
  this->openLoop_ = x;
}

void RealTimeType::
openLoop (::std::auto_ptr< openLoop_type > x)
{
  this->openLoop_.set (x);
}

const RealTimeType::hybrid_optional& RealTimeType::
hybrid () const
{
  return this->hybrid_;
}

RealTimeType::hybrid_optional& RealTimeType::
hybrid ()
{
  return this->hybrid_;
}

void RealTimeType::
hybrid (const hybrid_type& x)
{
  this->hybrid_.set (x);
}

void RealTimeType::
hybrid (const hybrid_optional& x)
{
  this->hybrid_ = x;
}

void RealTimeType::
hybrid (::std::auto_ptr< hybrid_type > x)
{
  this->hybrid_.set (x);
}


// OnlineType
// 


// OfflineType
// 


// CurvechoiceType
// 

const CurvechoiceType::online_optional& CurvechoiceType::
online () const
{
  return this->online_;
}

CurvechoiceType::online_optional& CurvechoiceType::
online ()
{
  return this->online_;
}

void CurvechoiceType::
online (const online_type& x)
{
  this->online_.set (x);
}

void CurvechoiceType::
online (const online_optional& x)
{
  this->online_ = x;
}

void CurvechoiceType::
online (::std::auto_ptr< online_type > x)
{
  this->online_.set (x);
}

const CurvechoiceType::offline_optional& CurvechoiceType::
offline () const
{
  return this->offline_;
}

CurvechoiceType::offline_optional& CurvechoiceType::
offline ()
{
  return this->offline_;
}

void CurvechoiceType::
offline (const offline_type& x)
{
  this->offline_.set (x);
}

void CurvechoiceType::
offline (const offline_optional& x)
{
  this->offline_ = x;
}

void CurvechoiceType::
offline (::std::auto_ptr< offline_type > x)
{
  this->offline_.set (x);
}


// TypeType
// 

const TypeType::openLoop_optional& TypeType::
openLoop () const
{
  return this->openLoop_;
}

TypeType::openLoop_optional& TypeType::
openLoop ()
{
  return this->openLoop_;
}

void TypeType::
openLoop (const openLoop_type& x)
{
  this->openLoop_.set (x);
}

void TypeType::
openLoop (const openLoop_optional& x)
{
  this->openLoop_ = x;
}

void TypeType::
openLoop (::std::auto_ptr< openLoop_type > x)
{
  this->openLoop_.set (x);
}

const TypeType::hybrid_optional& TypeType::
hybrid () const
{
  return this->hybrid_;
}

TypeType::hybrid_optional& TypeType::
hybrid ()
{
  return this->hybrid_;
}

void TypeType::
hybrid (const hybrid_type& x)
{
  this->hybrid_.set (x);
}

void TypeType::
hybrid (const hybrid_optional& x)
{
  this->hybrid_ = x;
}

void TypeType::
hybrid (::std::auto_ptr< hybrid_type > x)
{
  this->hybrid_.set (x);
}

const TypeType::realTime_optional& TypeType::
realTime () const
{
  return this->realTime_;
}

TypeType::realTime_optional& TypeType::
realTime ()
{
  return this->realTime_;
}

void TypeType::
realTime (const realTime_type& x)
{
  this->realTime_.set (x);
}

void TypeType::
realTime (const realTime_optional& x)
{
  this->realTime_ = x;
}

void TypeType::
realTime (::std::auto_ptr< realTime_type > x)
{
  this->realTime_.set (x);
}


// NMSModelType
// 

const NMSModelType::type_type& NMSModelType::
type () const
{
  return this->type_.get ();
}

NMSModelType::type_type& NMSModelType::
type ()
{
  return this->type_.get ();
}

void NMSModelType::
type (const type_type& x)
{
  this->type_.set (x);
}

void NMSModelType::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

const NMSModelType::tendon_type& NMSModelType::
tendon () const
{
  return this->tendon_.get ();
}

NMSModelType::tendon_type& NMSModelType::
tendon ()
{
  return this->tendon_.get ();
}

void NMSModelType::
tendon (const tendon_type& x)
{
  this->tendon_.set (x);
}

void NMSModelType::
tendon (::std::auto_ptr< tendon_type > x)
{
  this->tendon_.set (x);
}

const NMSModelType::activation_type& NMSModelType::
activation () const
{
  return this->activation_.get ();
}

NMSModelType::activation_type& NMSModelType::
activation ()
{
  return this->activation_.get ();
}

void NMSModelType::
activation (const activation_type& x)
{
  this->activation_.set (x);
}

void NMSModelType::
activation (::std::auto_ptr< activation_type > x)
{
  this->activation_.set (x);
}

const NMSModelType::curve_type& NMSModelType::
curve () const
{
  return this->curve_.get ();
}

NMSModelType::curve_type& NMSModelType::
curve ()
{
  return this->curve_.get ();
}

void NMSModelType::
curve (const curve_type& x)
{
  this->curve_.set (x);
}

void NMSModelType::
curve (::std::auto_ptr< curve_type > x)
{
  this->curve_.set (x);
}


// ElaboratedDoFsType
//

ElaboratedDoFsType::
ElaboratedDoFsType ()
: ::xsd::cxx::tree::list< ::xml_schema::string, char > (this)
{
}

ElaboratedDoFsType::
ElaboratedDoFsType (size_type n, const ::xml_schema::string& x)
: ::xsd::cxx::tree::list< ::xml_schema::string, char > (n, x, this)
{
}

ElaboratedDoFsType::
ElaboratedDoFsType (const ElaboratedDoFsType& o,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::simple_type (o, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::string, char > (o, f, this)
{
}

// ExecutionElementType
// 


// FileType
// 


// LoggingType
// 

const LoggingType::txt_optional& LoggingType::
txt () const
{
  return this->txt_;
}

LoggingType::txt_optional& LoggingType::
txt ()
{
  return this->txt_;
}

void LoggingType::
txt (const txt_type& x)
{
  this->txt_.set (x);
}

void LoggingType::
txt (const txt_optional& x)
{
  this->txt_ = x;
}

void LoggingType::
txt (::std::auto_ptr< txt_type > x)
{
  this->txt_.set (x);
}

const LoggingType::csv_optional& LoggingType::
csv () const
{
  return this->csv_;
}

LoggingType::csv_optional& LoggingType::
csv ()
{
  return this->csv_;
}

void LoggingType::
csv (const csv_type& x)
{
  this->csv_.set (x);
}

void LoggingType::
csv (const csv_optional& x)
{
  this->csv_ = x;
}

void LoggingType::
csv (::std::auto_ptr< csv_type > x)
{
  this->csv_.set (x);
}

const LoggingType::mot_optional& LoggingType::
mot () const
{
  return this->mot_;
}

LoggingType::mot_optional& LoggingType::
mot ()
{
  return this->mot_;
}

void LoggingType::
mot (const mot_type& x)
{
  this->mot_.set (x);
}

void LoggingType::
mot (const mot_optional& x)
{
  this->mot_ = x;
}

void LoggingType::
mot (::std::auto_ptr< mot_type > x)
{
  this->mot_.set (x);
}


// ExecutionType
// 

const ExecutionType::NMSmodel_type& ExecutionType::
NMSmodel () const
{
  return this->NMSmodel_.get ();
}

ExecutionType::NMSmodel_type& ExecutionType::
NMSmodel ()
{
  return this->NMSmodel_.get ();
}

void ExecutionType::
NMSmodel (const NMSmodel_type& x)
{
  this->NMSmodel_.set (x);
}

void ExecutionType::
NMSmodel (::std::auto_ptr< NMSmodel_type > x)
{
  this->NMSmodel_.set (x);
}

const ExecutionType::samplingFrequency_optional& ExecutionType::
samplingFrequency () const
{
  return this->samplingFrequency_;
}

ExecutionType::samplingFrequency_optional& ExecutionType::
samplingFrequency ()
{
  return this->samplingFrequency_;
}

void ExecutionType::
samplingFrequency (const samplingFrequency_type& x)
{
  this->samplingFrequency_.set (x);
}

void ExecutionType::
samplingFrequency (const samplingFrequency_optional& x)
{
  this->samplingFrequency_ = x;
}

const ExecutionType::elaboratedDoFs_optional& ExecutionType::
elaboratedDoFs () const
{
  return this->elaboratedDoFs_;
}

ExecutionType::elaboratedDoFs_optional& ExecutionType::
elaboratedDoFs ()
{
  return this->elaboratedDoFs_;
}

void ExecutionType::
elaboratedDoFs (const elaboratedDoFs_type& x)
{
  this->elaboratedDoFs_.set (x);
}

void ExecutionType::
elaboratedDoFs (const elaboratedDoFs_optional& x)
{
  this->elaboratedDoFs_ = x;
}

void ExecutionType::
elaboratedDoFs (::std::auto_ptr< elaboratedDoFs_type > x)
{
  this->elaboratedDoFs_.set (x);
}

const ExecutionType::logging_optional& ExecutionType::
logging () const
{
  return this->logging_;
}

ExecutionType::logging_optional& ExecutionType::
logging ()
{
  return this->logging_;
}

void ExecutionType::
logging (const logging_type& x)
{
  this->logging_.set (x);
}

void ExecutionType::
logging (const logging_optional& x)
{
  this->logging_ = x;
}

void ExecutionType::
logging (::std::auto_ptr< logging_type > x)
{
  this->logging_.set (x);
}

const ExecutionType::ConsumerPlugin_type& ExecutionType::
ConsumerPlugin () const
{
  return this->ConsumerPlugin_.get ();
}

ExecutionType::ConsumerPlugin_type& ExecutionType::
ConsumerPlugin ()
{
  return this->ConsumerPlugin_.get ();
}

void ExecutionType::
ConsumerPlugin (const ConsumerPlugin_type& x)
{
  this->ConsumerPlugin_.set (x);
}

void ExecutionType::
ConsumerPlugin (::std::auto_ptr< ConsumerPlugin_type > x)
{
  this->ConsumerPlugin_.set (x);
}

const ExecutionType::NameOfSubject_type& ExecutionType::
NameOfSubject () const
{
  return this->NameOfSubject_.get ();
}

ExecutionType::NameOfSubject_type& ExecutionType::
NameOfSubject ()
{
  return this->NameOfSubject_.get ();
}

void ExecutionType::
NameOfSubject (const NameOfSubject_type& x)
{
  this->NameOfSubject_.set (x);
}

void ExecutionType::
NameOfSubject (::std::auto_ptr< NameOfSubject_type > x)
{
  this->NameOfSubject_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// TendonElementType
//

TendonElementType::
TendonElementType ()
: ::xml_schema::type ()
{
}

TendonElementType::
TendonElementType (const TendonElementType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (x, f, c)
{
}

TendonElementType::
TendonElementType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (e, f, c)
{
}

TendonElementType::
TendonElementType (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (a, f, c)
{
}

TendonElementType::
TendonElementType (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (s, e, f, c)
{
}

TendonElementType* TendonElementType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class TendonElementType (*this, f, c);
}

TendonElementType::
~TendonElementType ()
{
}

// TendonType
//

TendonType::
TendonType ()
: ::xml_schema::type (),
  stiff_ (this),
  elastic_ (this),
  elasticBiSec_ (this)
{
}

TendonType::
TendonType (const TendonType& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  stiff_ (x.stiff_, f, this),
  elastic_ (x.elastic_, f, this),
  elasticBiSec_ (x.elasticBiSec_, f, this)
{
}

TendonType::
TendonType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  stiff_ (this),
  elastic_ (this),
  elasticBiSec_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void TendonType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // stiff
    //
    if (n.name () == "stiff" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< stiff_type > r (
        stiff_traits::create (i, f, this));

      if (!this->stiff_)
      {
        this->stiff_.set (r);
        continue;
      }
    }

    // elastic
    //
    if (n.name () == "elastic" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< elastic_type > r (
        elastic_traits::create (i, f, this));

      if (!this->elastic_)
      {
        this->elastic_.set (r);
        continue;
      }
    }

    // elasticBiSec
    //
    if (n.name () == "elasticBiSec" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< elasticBiSec_type > r (
        elasticBiSec_traits::create (i, f, this));

      if (!this->elasticBiSec_)
      {
        this->elasticBiSec_.set (r);
        continue;
      }
    }

    break;
  }
}

TendonType* TendonType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class TendonType (*this, f, c);
}

TendonType& TendonType::
operator= (const TendonType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->stiff_ = x.stiff_;
    this->elastic_ = x.elastic_;
    this->elasticBiSec_ = x.elasticBiSec_;
  }

  return *this;
}

TendonType::
~TendonType ()
{
}

// ActivationElementType
//

ActivationElementType::
ActivationElementType ()
: ::xml_schema::type ()
{
}

ActivationElementType::
ActivationElementType (const ActivationElementType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c)
{
}

ActivationElementType::
ActivationElementType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::type (e, f, c)
{
}

ActivationElementType::
ActivationElementType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::type (a, f, c)
{
}

ActivationElementType::
ActivationElementType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::type (s, e, f, c)
{
}

ActivationElementType* ActivationElementType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ActivationElementType (*this, f, c);
}

ActivationElementType::
~ActivationElementType ()
{
}

// ActivationType
//

ActivationType::
ActivationType ()
: ::xml_schema::type (),
  exponential_ (this),
  piecewise_ (this)
{
}

ActivationType::
ActivationType (const ActivationType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  exponential_ (x.exponential_, f, this),
  piecewise_ (x.piecewise_, f, this)
{
}

ActivationType::
ActivationType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  exponential_ (this),
  piecewise_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void ActivationType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // exponential
    //
    if (n.name () == "exponential" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< exponential_type > r (
        exponential_traits::create (i, f, this));

      if (!this->exponential_)
      {
        this->exponential_.set (r);
        continue;
      }
    }

    // piecewise
    //
    if (n.name () == "piecewise" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< piecewise_type > r (
        piecewise_traits::create (i, f, this));

      if (!this->piecewise_)
      {
        this->piecewise_.set (r);
        continue;
      }
    }

    break;
  }
}

ActivationType* ActivationType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ActivationType (*this, f, c);
}

ActivationType& ActivationType::
operator= (const ActivationType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->exponential_ = x.exponential_;
    this->piecewise_ = x.piecewise_;
  }

  return *this;
}

ActivationType::
~ActivationType ()
{
}

// HybridAlgorithmSimulatedAnnealingType
//

HybridAlgorithmSimulatedAnnealingType::
HybridAlgorithmSimulatedAnnealingType (const noEpsilon_type& noEpsilon,
                                       const rt_type& rt,
                                       const T_type& T,
                                       const NS_type& NS,
                                       const NT_type& NT,
                                       const epsilon_type& epsilon,
                                       const maxNoEval_type& maxNoEval)
: ::xml_schema::type (),
  noEpsilon_ (noEpsilon, this),
  rt_ (rt, this),
  T_ (T, this),
  NS_ (NS, this),
  NT_ (NT, this),
  epsilon_ (epsilon, this),
  maxNoEval_ (maxNoEval, this)
{
}

HybridAlgorithmSimulatedAnnealingType::
HybridAlgorithmSimulatedAnnealingType (const HybridAlgorithmSimulatedAnnealingType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  noEpsilon_ (x.noEpsilon_, f, this),
  rt_ (x.rt_, f, this),
  T_ (x.T_, f, this),
  NS_ (x.NS_, f, this),
  NT_ (x.NT_, f, this),
  epsilon_ (x.epsilon_, f, this),
  maxNoEval_ (x.maxNoEval_, f, this)
{
}

HybridAlgorithmSimulatedAnnealingType::
HybridAlgorithmSimulatedAnnealingType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  noEpsilon_ (this),
  rt_ (this),
  T_ (this),
  NS_ (this),
  NT_ (this),
  epsilon_ (this),
  maxNoEval_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void HybridAlgorithmSimulatedAnnealingType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // noEpsilon
    //
    if (n.name () == "noEpsilon" && n.namespace_ ().empty ())
    {
      if (!noEpsilon_.present ())
      {
        this->noEpsilon_.set (noEpsilon_traits::create (i, f, this));
        continue;
      }
    }

    // rt
    //
    if (n.name () == "rt" && n.namespace_ ().empty ())
    {
      if (!rt_.present ())
      {
        this->rt_.set (rt_traits::create (i, f, this));
        continue;
      }
    }

    // T
    //
    if (n.name () == "T" && n.namespace_ ().empty ())
    {
      if (!T_.present ())
      {
        this->T_.set (T_traits::create (i, f, this));
        continue;
      }
    }

    // NS
    //
    if (n.name () == "NS" && n.namespace_ ().empty ())
    {
      if (!NS_.present ())
      {
        this->NS_.set (NS_traits::create (i, f, this));
        continue;
      }
    }

    // NT
    //
    if (n.name () == "NT" && n.namespace_ ().empty ())
    {
      if (!NT_.present ())
      {
        this->NT_.set (NT_traits::create (i, f, this));
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!epsilon_.present ())
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // maxNoEval
    //
    if (n.name () == "maxNoEval" && n.namespace_ ().empty ())
    {
      if (!maxNoEval_.present ())
      {
        this->maxNoEval_.set (maxNoEval_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!noEpsilon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "noEpsilon",
      "");
  }

  if (!rt_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "rt",
      "");
  }

  if (!T_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "T",
      "");
  }

  if (!NS_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "NS",
      "");
  }

  if (!NT_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "NT",
      "");
  }

  if (!epsilon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "epsilon",
      "");
  }

  if (!maxNoEval_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "maxNoEval",
      "");
  }
}

HybridAlgorithmSimulatedAnnealingType* HybridAlgorithmSimulatedAnnealingType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class HybridAlgorithmSimulatedAnnealingType (*this, f, c);
}

HybridAlgorithmSimulatedAnnealingType& HybridAlgorithmSimulatedAnnealingType::
operator= (const HybridAlgorithmSimulatedAnnealingType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->noEpsilon_ = x.noEpsilon_;
    this->rt_ = x.rt_;
    this->T_ = x.T_;
    this->NS_ = x.NS_;
    this->NT_ = x.NT_;
    this->epsilon_ = x.epsilon_;
    this->maxNoEval_ = x.maxNoEval_;
  }

  return *this;
}

HybridAlgorithmSimulatedAnnealingType::
~HybridAlgorithmSimulatedAnnealingType ()
{
}

// HybridAlgorithmType
//

HybridAlgorithmType::
HybridAlgorithmType (const hybridSimulatedAnnealing_type& hybridSimulatedAnnealing)
: ::xml_schema::type (),
  hybridSimulatedAnnealing_ (hybridSimulatedAnnealing, this)
{
}

HybridAlgorithmType::
HybridAlgorithmType (::std::auto_ptr< hybridSimulatedAnnealing_type > hybridSimulatedAnnealing)
: ::xml_schema::type (),
  hybridSimulatedAnnealing_ (hybridSimulatedAnnealing, this)
{
}

HybridAlgorithmType::
HybridAlgorithmType (const HybridAlgorithmType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  hybridSimulatedAnnealing_ (x.hybridSimulatedAnnealing_, f, this)
{
}

HybridAlgorithmType::
HybridAlgorithmType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  hybridSimulatedAnnealing_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void HybridAlgorithmType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // hybridSimulatedAnnealing
    //
    if (n.name () == "hybridSimulatedAnnealing" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< hybridSimulatedAnnealing_type > r (
        hybridSimulatedAnnealing_traits::create (i, f, this));

      if (!hybridSimulatedAnnealing_.present ())
      {
        this->hybridSimulatedAnnealing_.set (r);
        continue;
      }
    }

    break;
  }

  if (!hybridSimulatedAnnealing_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "hybridSimulatedAnnealing",
      "");
  }
}

HybridAlgorithmType* HybridAlgorithmType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class HybridAlgorithmType (*this, f, c);
}

HybridAlgorithmType& HybridAlgorithmType::
operator= (const HybridAlgorithmType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->hybridSimulatedAnnealing_ = x.hybridSimulatedAnnealing_;
  }

  return *this;
}

HybridAlgorithmType::
~HybridAlgorithmType ()
{
}

// OpenLoopType
//

OpenLoopType::
OpenLoopType ()
: ::xml_schema::type ()
{
}

OpenLoopType::
OpenLoopType (const OpenLoopType& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c)
{
}

OpenLoopType::
OpenLoopType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f, c)
{
}

OpenLoopType::
OpenLoopType (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (a, f, c)
{
}

OpenLoopType::
OpenLoopType (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (s, e, f, c)
{
}

OpenLoopType* OpenLoopType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class OpenLoopType (*this, f, c);
}

OpenLoopType::
~OpenLoopType ()
{
}

// MuscleListType
//

MuscleListType::
MuscleListType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::simple_type (e, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::string, char > (e, f, this)
{
}

MuscleListType::
MuscleListType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::simple_type (a, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::string, char > (a, f, this)
{
}

MuscleListType::
MuscleListType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::simple_type (s, e, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::string, char > (s, e, f, this)
{
}

MuscleListType* MuscleListType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class MuscleListType (*this, f, c);
}

MuscleListType::
~MuscleListType ()
{
}

// HybridType
//

HybridType::
HybridType (const alpha_type& alpha,
            const beta_type& beta,
            const gamma_type& gamma,
            const trackedMuscles_type& trackedMuscles,
            const predictedMuscles_type& predictedMuscles,
            const algorithm_type& algorithm)
: ::xml_schema::type (),
  alpha_ (alpha, this),
  beta_ (beta, this),
  gamma_ (gamma, this),
  trackedMuscles_ (trackedMuscles, this),
  predictedMuscles_ (predictedMuscles, this),
  algorithm_ (algorithm, this)
{
}

HybridType::
HybridType (const alpha_type& alpha,
            const beta_type& beta,
            const gamma_type& gamma,
            const trackedMuscles_type& trackedMuscles,
            const predictedMuscles_type& predictedMuscles,
            ::std::auto_ptr< algorithm_type > algorithm)
: ::xml_schema::type (),
  alpha_ (alpha, this),
  beta_ (beta, this),
  gamma_ (gamma, this),
  trackedMuscles_ (trackedMuscles, this),
  predictedMuscles_ (predictedMuscles, this),
  algorithm_ (algorithm, this)
{
}

HybridType::
HybridType (const HybridType& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  alpha_ (x.alpha_, f, this),
  beta_ (x.beta_, f, this),
  gamma_ (x.gamma_, f, this),
  trackedMuscles_ (x.trackedMuscles_, f, this),
  predictedMuscles_ (x.predictedMuscles_, f, this),
  algorithm_ (x.algorithm_, f, this)
{
}

HybridType::
HybridType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  alpha_ (this),
  beta_ (this),
  gamma_ (this),
  trackedMuscles_ (this),
  predictedMuscles_ (this),
  algorithm_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void HybridType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // alpha
    //
    if (n.name () == "alpha" && n.namespace_ ().empty ())
    {
      if (!alpha_.present ())
      {
        this->alpha_.set (alpha_traits::create (i, f, this));
        continue;
      }
    }

    // beta
    //
    if (n.name () == "beta" && n.namespace_ ().empty ())
    {
      if (!beta_.present ())
      {
        this->beta_.set (beta_traits::create (i, f, this));
        continue;
      }
    }

    // gamma
    //
    if (n.name () == "gamma" && n.namespace_ ().empty ())
    {
      if (!gamma_.present ())
      {
        this->gamma_.set (gamma_traits::create (i, f, this));
        continue;
      }
    }

    // trackedMuscles
    //
    if (n.name () == "trackedMuscles" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< trackedMuscles_type > r (
        trackedMuscles_traits::create (i, f, this));

      if (!trackedMuscles_.present ())
      {
        this->trackedMuscles_.set (r);
        continue;
      }
    }

    // predictedMuscles
    //
    if (n.name () == "predictedMuscles" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< predictedMuscles_type > r (
        predictedMuscles_traits::create (i, f, this));

      if (!predictedMuscles_.present ())
      {
        this->predictedMuscles_.set (r);
        continue;
      }
    }

    // algorithm
    //
    if (n.name () == "algorithm" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< algorithm_type > r (
        algorithm_traits::create (i, f, this));

      if (!algorithm_.present ())
      {
        this->algorithm_.set (r);
        continue;
      }
    }

    break;
  }

  if (!alpha_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "alpha",
      "");
  }

  if (!beta_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "beta",
      "");
  }

  if (!gamma_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "gamma",
      "");
  }

  if (!trackedMuscles_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "trackedMuscles",
      "");
  }

  if (!predictedMuscles_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "predictedMuscles",
      "");
  }

  if (!algorithm_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "algorithm",
      "");
  }
}

HybridType* HybridType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class HybridType (*this, f, c);
}

HybridType& HybridType::
operator= (const HybridType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->alpha_ = x.alpha_;
    this->beta_ = x.beta_;
    this->gamma_ = x.gamma_;
    this->trackedMuscles_ = x.trackedMuscles_;
    this->predictedMuscles_ = x.predictedMuscles_;
    this->algorithm_ = x.algorithm_;
  }

  return *this;
}

HybridType::
~HybridType ()
{
}

// DevicePluginType
//

DevicePluginType::
DevicePluginType ()
: ::xml_schema::type (),
  EMGDevice_ (this),
  EMGDeviceFile_ (this),
  AngleDevice_ (this),
  AngleDeviceFile_ (this),
  TorqueDevice_ (this),
  TorqueDeviceFile_ (this),
  ComsumerDevice_ (this),
  ComsumerPort_ (this),
  EMGAndAngleDevice_ (this),
  OptimizationDevice_ (this),
  OptimizationFile_ (this),
  AngleAndComsumerDevice_ (this)
{
}

DevicePluginType::
DevicePluginType (const DevicePluginType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  EMGDevice_ (x.EMGDevice_, f, this),
  EMGDeviceFile_ (x.EMGDeviceFile_, f, this),
  AngleDevice_ (x.AngleDevice_, f, this),
  AngleDeviceFile_ (x.AngleDeviceFile_, f, this),
  TorqueDevice_ (x.TorqueDevice_, f, this),
  TorqueDeviceFile_ (x.TorqueDeviceFile_, f, this),
  ComsumerDevice_ (x.ComsumerDevice_, f, this),
  ComsumerPort_ (x.ComsumerPort_, f, this),
  EMGAndAngleDevice_ (x.EMGAndAngleDevice_, f, this),
  OptimizationDevice_ (x.OptimizationDevice_, f, this),
  OptimizationFile_ (x.OptimizationFile_, f, this),
  AngleAndComsumerDevice_ (x.AngleAndComsumerDevice_, f, this)
{
}

DevicePluginType::
DevicePluginType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  EMGDevice_ (this),
  EMGDeviceFile_ (this),
  AngleDevice_ (this),
  AngleDeviceFile_ (this),
  TorqueDevice_ (this),
  TorqueDeviceFile_ (this),
  ComsumerDevice_ (this),
  ComsumerPort_ (this),
  EMGAndAngleDevice_ (this),
  OptimizationDevice_ (this),
  OptimizationFile_ (this),
  AngleAndComsumerDevice_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void DevicePluginType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // EMGDevice
    //
    if (n.name () == "EMGDevice" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< EMGDevice_type > r (
        EMGDevice_traits::create (i, f, this));

      if (!this->EMGDevice_)
      {
        this->EMGDevice_.set (r);
        continue;
      }
    }

    // EMGDeviceFile
    //
    if (n.name () == "EMGDeviceFile" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< EMGDeviceFile_type > r (
        EMGDeviceFile_traits::create (i, f, this));

      if (!this->EMGDeviceFile_)
      {
        this->EMGDeviceFile_.set (r);
        continue;
      }
    }

    // AngleDevice
    //
    if (n.name () == "AngleDevice" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< AngleDevice_type > r (
        AngleDevice_traits::create (i, f, this));

      if (!this->AngleDevice_)
      {
        this->AngleDevice_.set (r);
        continue;
      }
    }

    // AngleDeviceFile
    //
    if (n.name () == "AngleDeviceFile" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< AngleDeviceFile_type > r (
        AngleDeviceFile_traits::create (i, f, this));

      if (!this->AngleDeviceFile_)
      {
        this->AngleDeviceFile_.set (r);
        continue;
      }
    }

    // TorqueDevice
    //
    if (n.name () == "TorqueDevice" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< TorqueDevice_type > r (
        TorqueDevice_traits::create (i, f, this));

      if (!this->TorqueDevice_)
      {
        this->TorqueDevice_.set (r);
        continue;
      }
    }

    // TorqueDeviceFile
    //
    if (n.name () == "TorqueDeviceFile" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< TorqueDeviceFile_type > r (
        TorqueDeviceFile_traits::create (i, f, this));

      if (!this->TorqueDeviceFile_)
      {
        this->TorqueDeviceFile_.set (r);
        continue;
      }
    }

    // ComsumerDevice
    //
    if (n.name () == "ComsumerDevice" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< ComsumerDevice_type > r (
        ComsumerDevice_traits::create (i, f, this));

      if (!this->ComsumerDevice_)
      {
        this->ComsumerDevice_.set (r);
        continue;
      }
    }

    // ComsumerPort
    //
    if (n.name () == "ComsumerPort" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< ComsumerPort_type > r (
        ComsumerPort_traits::create (i, f, this));

      if (!this->ComsumerPort_)
      {
        this->ComsumerPort_.set (r);
        continue;
      }
    }

    // EMGAndAngleDevice
    //
    if (n.name () == "EMGAndAngleDevice" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< EMGAndAngleDevice_type > r (
        EMGAndAngleDevice_traits::create (i, f, this));

      if (!this->EMGAndAngleDevice_)
      {
        this->EMGAndAngleDevice_.set (r);
        continue;
      }
    }

    // OptimizationDevice
    //
    if (n.name () == "OptimizationDevice" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< OptimizationDevice_type > r (
        OptimizationDevice_traits::create (i, f, this));

      if (!this->OptimizationDevice_)
      {
        this->OptimizationDevice_.set (r);
        continue;
      }
    }

    // OptimizationFile
    //
    if (n.name () == "OptimizationFile" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< OptimizationFile_type > r (
        OptimizationFile_traits::create (i, f, this));

      if (!this->OptimizationFile_)
      {
        this->OptimizationFile_.set (r);
        continue;
      }
    }

    // AngleAndComsumerDevice
    //
    if (n.name () == "AngleAndComsumerDevice" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< AngleAndComsumerDevice_type > r (
        AngleAndComsumerDevice_traits::create (i, f, this));

      if (!this->AngleAndComsumerDevice_)
      {
        this->AngleAndComsumerDevice_.set (r);
        continue;
      }
    }

    break;
  }
}

DevicePluginType* DevicePluginType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class DevicePluginType (*this, f, c);
}

DevicePluginType& DevicePluginType::
operator= (const DevicePluginType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->EMGDevice_ = x.EMGDevice_;
    this->EMGDeviceFile_ = x.EMGDeviceFile_;
    this->AngleDevice_ = x.AngleDevice_;
    this->AngleDeviceFile_ = x.AngleDeviceFile_;
    this->TorqueDevice_ = x.TorqueDevice_;
    this->TorqueDeviceFile_ = x.TorqueDeviceFile_;
    this->ComsumerDevice_ = x.ComsumerDevice_;
    this->ComsumerPort_ = x.ComsumerPort_;
    this->EMGAndAngleDevice_ = x.EMGAndAngleDevice_;
    this->OptimizationDevice_ = x.OptimizationDevice_;
    this->OptimizationFile_ = x.OptimizationFile_;
    this->AngleAndComsumerDevice_ = x.AngleAndComsumerDevice_;
  }

  return *this;
}

DevicePluginType::
~DevicePluginType ()
{
}

// RealTimeType
//

RealTimeType::
RealTimeType ()
: ::xml_schema::type (),
  openLoop_ (this),
  hybrid_ (this)
{
}

RealTimeType::
RealTimeType (const RealTimeType& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  openLoop_ (x.openLoop_, f, this),
  hybrid_ (x.hybrid_, f, this)
{
}

RealTimeType::
RealTimeType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  openLoop_ (this),
  hybrid_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void RealTimeType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // openLoop
    //
    if (n.name () == "openLoop" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< openLoop_type > r (
        openLoop_traits::create (i, f, this));

      if (!this->openLoop_)
      {
        this->openLoop_.set (r);
        continue;
      }
    }

    // hybrid
    //
    if (n.name () == "hybrid" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< hybrid_type > r (
        hybrid_traits::create (i, f, this));

      if (!this->hybrid_)
      {
        this->hybrid_.set (r);
        continue;
      }
    }

    break;
  }
}

RealTimeType* RealTimeType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class RealTimeType (*this, f, c);
}

RealTimeType& RealTimeType::
operator= (const RealTimeType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->openLoop_ = x.openLoop_;
    this->hybrid_ = x.hybrid_;
  }

  return *this;
}

RealTimeType::
~RealTimeType ()
{
}

// OnlineType
//

OnlineType::
OnlineType ()
: ::xml_schema::type ()
{
}

OnlineType::
OnlineType (const OnlineType& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c)
{
}

OnlineType::
OnlineType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f, c)
{
}

OnlineType::
OnlineType (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (a, f, c)
{
}

OnlineType::
OnlineType (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (s, e, f, c)
{
}

OnlineType* OnlineType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class OnlineType (*this, f, c);
}

OnlineType::
~OnlineType ()
{
}

// OfflineType
//

OfflineType::
OfflineType ()
: ::xml_schema::type ()
{
}

OfflineType::
OfflineType (const OfflineType& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c)
{
}

OfflineType::
OfflineType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (e, f, c)
{
}

OfflineType::
OfflineType (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (a, f, c)
{
}

OfflineType::
OfflineType (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (s, e, f, c)
{
}

OfflineType* OfflineType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class OfflineType (*this, f, c);
}

OfflineType::
~OfflineType ()
{
}

// CurvechoiceType
//

CurvechoiceType::
CurvechoiceType ()
: ::xml_schema::type (),
  online_ (this),
  offline_ (this)
{
}

CurvechoiceType::
CurvechoiceType (const CurvechoiceType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  online_ (x.online_, f, this),
  offline_ (x.offline_, f, this)
{
}

CurvechoiceType::
CurvechoiceType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  online_ (this),
  offline_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void CurvechoiceType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // online
    //
    if (n.name () == "online" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< online_type > r (
        online_traits::create (i, f, this));

      if (!this->online_)
      {
        this->online_.set (r);
        continue;
      }
    }

    // offline
    //
    if (n.name () == "offline" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< offline_type > r (
        offline_traits::create (i, f, this));

      if (!this->offline_)
      {
        this->offline_.set (r);
        continue;
      }
    }

    break;
  }
}

CurvechoiceType* CurvechoiceType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class CurvechoiceType (*this, f, c);
}

CurvechoiceType& CurvechoiceType::
operator= (const CurvechoiceType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->online_ = x.online_;
    this->offline_ = x.offline_;
  }

  return *this;
}

CurvechoiceType::
~CurvechoiceType ()
{
}

// TypeType
//

TypeType::
TypeType ()
: ::xml_schema::type (),
  openLoop_ (this),
  hybrid_ (this),
  realTime_ (this)
{
}

TypeType::
TypeType (const TypeType& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  openLoop_ (x.openLoop_, f, this),
  hybrid_ (x.hybrid_, f, this),
  realTime_ (x.realTime_, f, this)
{
}

TypeType::
TypeType (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  openLoop_ (this),
  hybrid_ (this),
  realTime_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void TypeType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // openLoop
    //
    if (n.name () == "openLoop" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< openLoop_type > r (
        openLoop_traits::create (i, f, this));

      if (!this->openLoop_)
      {
        this->openLoop_.set (r);
        continue;
      }
    }

    // hybrid
    //
    if (n.name () == "hybrid" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< hybrid_type > r (
        hybrid_traits::create (i, f, this));

      if (!this->hybrid_)
      {
        this->hybrid_.set (r);
        continue;
      }
    }

    // realTime
    //
    if (n.name () == "realTime" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< realTime_type > r (
        realTime_traits::create (i, f, this));

      if (!this->realTime_)
      {
        this->realTime_.set (r);
        continue;
      }
    }

    break;
  }
}

TypeType* TypeType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class TypeType (*this, f, c);
}

TypeType& TypeType::
operator= (const TypeType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->openLoop_ = x.openLoop_;
    this->hybrid_ = x.hybrid_;
    this->realTime_ = x.realTime_;
  }

  return *this;
}

TypeType::
~TypeType ()
{
}

// NMSModelType
//

NMSModelType::
NMSModelType (const type_type& type,
              const tendon_type& tendon,
              const activation_type& activation,
              const curve_type& curve)
: ::xml_schema::type (),
  type_ (type, this),
  tendon_ (tendon, this),
  activation_ (activation, this),
  curve_ (curve, this)
{
}

NMSModelType::
NMSModelType (::std::auto_ptr< type_type > type,
              ::std::auto_ptr< tendon_type > tendon,
              ::std::auto_ptr< activation_type > activation,
              ::std::auto_ptr< curve_type > curve)
: ::xml_schema::type (),
  type_ (type, this),
  tendon_ (tendon, this),
  activation_ (activation, this),
  curve_ (curve, this)
{
}

NMSModelType::
NMSModelType (const NMSModelType& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  type_ (x.type_, f, this),
  tendon_ (x.tendon_, f, this),
  activation_ (x.activation_, f, this),
  curve_ (x.curve_, f, this)
{
}

NMSModelType::
NMSModelType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  type_ (this),
  tendon_ (this),
  activation_ (this),
  curve_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void NMSModelType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< type_type > r (
        type_traits::create (i, f, this));

      if (!type_.present ())
      {
        this->type_.set (r);
        continue;
      }
    }

    // tendon
    //
    if (n.name () == "tendon" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< tendon_type > r (
        tendon_traits::create (i, f, this));

      if (!tendon_.present ())
      {
        this->tendon_.set (r);
        continue;
      }
    }

    // activation
    //
    if (n.name () == "activation" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< activation_type > r (
        activation_traits::create (i, f, this));

      if (!activation_.present ())
      {
        this->activation_.set (r);
        continue;
      }
    }

    // curve
    //
    if (n.name () == "curve" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< curve_type > r (
        curve_traits::create (i, f, this));

      if (!curve_.present ())
      {
        this->curve_.set (r);
        continue;
      }
    }

    break;
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }

  if (!tendon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "tendon",
      "");
  }

  if (!activation_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "activation",
      "");
  }

  if (!curve_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "curve",
      "");
  }
}

NMSModelType* NMSModelType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class NMSModelType (*this, f, c);
}

NMSModelType& NMSModelType::
operator= (const NMSModelType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->type_ = x.type_;
    this->tendon_ = x.tendon_;
    this->activation_ = x.activation_;
    this->curve_ = x.curve_;
  }

  return *this;
}

NMSModelType::
~NMSModelType ()
{
}

// ElaboratedDoFsType
//

ElaboratedDoFsType::
ElaboratedDoFsType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::simple_type (e, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::string, char > (e, f, this)
{
}

ElaboratedDoFsType::
ElaboratedDoFsType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::simple_type (a, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::string, char > (a, f, this)
{
}

ElaboratedDoFsType::
ElaboratedDoFsType (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::simple_type (s, e, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::string, char > (s, e, f, this)
{
}

ElaboratedDoFsType* ElaboratedDoFsType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ElaboratedDoFsType (*this, f, c);
}

ElaboratedDoFsType::
~ElaboratedDoFsType ()
{
}

// ExecutionElementType
//

ExecutionElementType::
ExecutionElementType ()
: ::xml_schema::type ()
{
}

ExecutionElementType::
ExecutionElementType (const ExecutionElementType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c)
{
}

ExecutionElementType::
ExecutionElementType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (e, f, c)
{
}

ExecutionElementType::
ExecutionElementType (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (a, f, c)
{
}

ExecutionElementType::
ExecutionElementType (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (s, e, f, c)
{
}

ExecutionElementType* ExecutionElementType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ExecutionElementType (*this, f, c);
}

ExecutionElementType::
~ExecutionElementType ()
{
}

// FileType
//

FileType::
FileType ()
: ::xml_schema::type ()
{
}

FileType::
FileType (const FileType& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c)
{
}

FileType::
FileType (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f, c)
{
}

FileType::
FileType (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (a, f, c)
{
}

FileType::
FileType (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (s, e, f, c)
{
}

FileType* FileType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class FileType (*this, f, c);
}

FileType::
~FileType ()
{
}

// LoggingType
//

LoggingType::
LoggingType ()
: ::xml_schema::type (),
  txt_ (this),
  csv_ (this),
  mot_ (this)
{
}

LoggingType::
LoggingType (const LoggingType& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  txt_ (x.txt_, f, this),
  csv_ (x.csv_, f, this),
  mot_ (x.mot_, f, this)
{
}

LoggingType::
LoggingType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  txt_ (this),
  csv_ (this),
  mot_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void LoggingType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // txt
    //
    if (n.name () == "txt" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< txt_type > r (
        txt_traits::create (i, f, this));

      if (!this->txt_)
      {
        this->txt_.set (r);
        continue;
      }
    }

    // csv
    //
    if (n.name () == "csv" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< csv_type > r (
        csv_traits::create (i, f, this));

      if (!this->csv_)
      {
        this->csv_.set (r);
        continue;
      }
    }

    // mot
    //
    if (n.name () == "mot" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< mot_type > r (
        mot_traits::create (i, f, this));

      if (!this->mot_)
      {
        this->mot_.set (r);
        continue;
      }
    }

    break;
  }
}

LoggingType* LoggingType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class LoggingType (*this, f, c);
}

LoggingType& LoggingType::
operator= (const LoggingType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->txt_ = x.txt_;
    this->csv_ = x.csv_;
    this->mot_ = x.mot_;
  }

  return *this;
}

LoggingType::
~LoggingType ()
{
}

// ExecutionType
//

ExecutionType::
ExecutionType (const NMSmodel_type& NMSmodel,
               const ConsumerPlugin_type& ConsumerPlugin,
               const NameOfSubject_type& NameOfSubject)
: ::xml_schema::type (),
  NMSmodel_ (NMSmodel, this),
  samplingFrequency_ (this),
  elaboratedDoFs_ (this),
  logging_ (this),
  ConsumerPlugin_ (ConsumerPlugin, this),
  NameOfSubject_ (NameOfSubject, this)
{
}

ExecutionType::
ExecutionType (::std::auto_ptr< NMSmodel_type > NMSmodel,
               ::std::auto_ptr< ConsumerPlugin_type > ConsumerPlugin,
               const NameOfSubject_type& NameOfSubject)
: ::xml_schema::type (),
  NMSmodel_ (NMSmodel, this),
  samplingFrequency_ (this),
  elaboratedDoFs_ (this),
  logging_ (this),
  ConsumerPlugin_ (ConsumerPlugin, this),
  NameOfSubject_ (NameOfSubject, this)
{
}

ExecutionType::
ExecutionType (const ExecutionType& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  NMSmodel_ (x.NMSmodel_, f, this),
  samplingFrequency_ (x.samplingFrequency_, f, this),
  elaboratedDoFs_ (x.elaboratedDoFs_, f, this),
  logging_ (x.logging_, f, this),
  ConsumerPlugin_ (x.ConsumerPlugin_, f, this),
  NameOfSubject_ (x.NameOfSubject_, f, this)
{
}

ExecutionType::
ExecutionType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  NMSmodel_ (this),
  samplingFrequency_ (this),
  elaboratedDoFs_ (this),
  logging_ (this),
  ConsumerPlugin_ (this),
  NameOfSubject_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void ExecutionType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // NMSmodel
    //
    if (n.name () == "NMSmodel" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< NMSmodel_type > r (
        NMSmodel_traits::create (i, f, this));

      if (!NMSmodel_.present ())
      {
        this->NMSmodel_.set (r);
        continue;
      }
    }

    // samplingFrequency
    //
    if (n.name () == "samplingFrequency" && n.namespace_ ().empty ())
    {
      if (!this->samplingFrequency_)
      {
        this->samplingFrequency_.set (samplingFrequency_traits::create (i, f, this));
        continue;
      }
    }

    // elaboratedDoFs
    //
    if (n.name () == "elaboratedDoFs" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< elaboratedDoFs_type > r (
        elaboratedDoFs_traits::create (i, f, this));

      if (!this->elaboratedDoFs_)
      {
        this->elaboratedDoFs_.set (r);
        continue;
      }
    }

    // logging
    //
    if (n.name () == "logging" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< logging_type > r (
        logging_traits::create (i, f, this));

      if (!this->logging_)
      {
        this->logging_.set (r);
        continue;
      }
    }

    // ConsumerPlugin
    //
    if (n.name () == "ConsumerPlugin" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< ConsumerPlugin_type > r (
        ConsumerPlugin_traits::create (i, f, this));

      if (!ConsumerPlugin_.present ())
      {
        this->ConsumerPlugin_.set (r);
        continue;
      }
    }

    // NameOfSubject
    //
    if (n.name () == "NameOfSubject" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< NameOfSubject_type > r (
        NameOfSubject_traits::create (i, f, this));

      if (!NameOfSubject_.present ())
      {
        this->NameOfSubject_.set (r);
        continue;
      }
    }

    break;
  }

  if (!NMSmodel_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "NMSmodel",
      "");
  }

  if (!ConsumerPlugin_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "ConsumerPlugin",
      "");
  }

  if (!NameOfSubject_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "NameOfSubject",
      "");
  }
}

ExecutionType* ExecutionType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ExecutionType (*this, f, c);
}

ExecutionType& ExecutionType::
operator= (const ExecutionType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->NMSmodel_ = x.NMSmodel_;
    this->samplingFrequency_ = x.samplingFrequency_;
    this->elaboratedDoFs_ = x.elaboratedDoFs_;
    this->logging_ = x.logging_;
    this->ConsumerPlugin_ = x.ConsumerPlugin_;
    this->NameOfSubject_ = x.NameOfSubject_;
  }

  return *this;
}

ExecutionType::
~ExecutionType ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::ExecutionType >
execution (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::ExecutionType > (
    ::execution (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::ExecutionType >
execution (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::ExecutionType > (
    ::execution (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::ExecutionType >
execution (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::ExecutionType > (
    ::execution (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::ExecutionType >
execution (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::execution (isrc, f, p);
}

::std::auto_ptr< ::ExecutionType >
execution (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::execution (isrc, h, f, p);
}

::std::auto_ptr< ::ExecutionType >
execution (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::execution (isrc, h, f, p);
}

::std::auto_ptr< ::ExecutionType >
execution (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::execution (isrc, f, p);
}

::std::auto_ptr< ::ExecutionType >
execution (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::execution (isrc, h, f, p);
}

::std::auto_ptr< ::ExecutionType >
execution (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::execution (isrc, h, f, p);
}

::std::auto_ptr< ::ExecutionType >
execution (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::ExecutionType > (
    ::execution (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::ExecutionType >
execution (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::ExecutionType > (
    ::execution (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::ExecutionType >
execution (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::ExecutionType > (
    ::execution (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::ExecutionType >
execution (const ::xercesc::DOMDocument& doc,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::ExecutionType > (
      ::execution (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "execution" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::ExecutionType > r (
      ::xsd::cxx::tree::traits< ::ExecutionType, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "execution",
    "");
}

::std::auto_ptr< ::ExecutionType >
execution (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "execution" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::ExecutionType > r (
      ::xsd::cxx::tree::traits< ::ExecutionType, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "execution",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const TendonElementType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);
}

void
operator<< (::xercesc::DOMAttr&, const TendonElementType&)
{
}

void
operator<< (::xml_schema::list_stream&,
            const TendonElementType&)
{
}

void
operator<< (::xercesc::DOMElement& e, const TendonType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // stiff
  //
  if (i.stiff ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "stiff",
        e));

    s << *i.stiff ();
  }

  // elastic
  //
  if (i.elastic ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "elastic",
        e));

    s << *i.elastic ();
  }

  // elasticBiSec
  //
  if (i.elasticBiSec ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "elasticBiSec",
        e));

    s << *i.elasticBiSec ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const ActivationElementType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);
}

void
operator<< (::xercesc::DOMAttr&, const ActivationElementType&)
{
}

void
operator<< (::xml_schema::list_stream&,
            const ActivationElementType&)
{
}

void
operator<< (::xercesc::DOMElement& e, const ActivationType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // exponential
  //
  if (i.exponential ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "exponential",
        e));

    s << *i.exponential ();
  }

  // piecewise
  //
  if (i.piecewise ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "piecewise",
        e));

    s << *i.piecewise ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const HybridAlgorithmSimulatedAnnealingType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // noEpsilon
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "noEpsilon",
        e));

    s << i.noEpsilon ();
  }

  // rt
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "rt",
        e));

    s << ::xml_schema::as_double(i.rt ());
  }

  // T
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "T",
        e));

    s << ::xml_schema::as_double(i.T ());
  }

  // NS
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "NS",
        e));

    s << i.NS ();
  }

  // NT
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "NT",
        e));

    s << i.NT ();
  }

  // epsilon
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "epsilon",
        e));

    s << ::xml_schema::as_double(i.epsilon ());
  }

  // maxNoEval
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "maxNoEval",
        e));

    s << i.maxNoEval ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const HybridAlgorithmType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // hybridSimulatedAnnealing
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "hybridSimulatedAnnealing",
        e));

    s << i.hybridSimulatedAnnealing ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const OpenLoopType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);
}

void
operator<< (::xercesc::DOMAttr&, const OpenLoopType&)
{
}

void
operator<< (::xml_schema::list_stream&,
            const OpenLoopType&)
{
}

void
operator<< (::xercesc::DOMElement& e, const MuscleListType& i)
{
  e << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::string, char >& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const MuscleListType& i)
{
  a << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::string, char >& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const MuscleListType& i)
{
  l << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::string, char >& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const HybridType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // alpha
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "alpha",
        e));

    s << ::xml_schema::as_double(i.alpha ());
  }

  // beta
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "beta",
        e));

    s << ::xml_schema::as_double(i.beta ());
  }

  // gamma
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "gamma",
        e));

    s << ::xml_schema::as_double(i.gamma ());
  }

  // trackedMuscles
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "trackedMuscles",
        e));

    s << i.trackedMuscles ();
  }

  // predictedMuscles
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "predictedMuscles",
        e));

    s << i.predictedMuscles ();
  }

  // algorithm
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "algorithm",
        e));

    s << i.algorithm ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const DevicePluginType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // EMGDevice
  //
  if (i.EMGDevice ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "EMGDevice",
        e));

    s << *i.EMGDevice ();
  }

  // EMGDeviceFile
  //
  if (i.EMGDeviceFile ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "EMGDeviceFile",
        e));

    s << *i.EMGDeviceFile ();
  }

  // AngleDevice
  //
  if (i.AngleDevice ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "AngleDevice",
        e));

    s << *i.AngleDevice ();
  }

  // AngleDeviceFile
  //
  if (i.AngleDeviceFile ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "AngleDeviceFile",
        e));

    s << *i.AngleDeviceFile ();
  }

  // TorqueDevice
  //
  if (i.TorqueDevice ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "TorqueDevice",
        e));

    s << *i.TorqueDevice ();
  }

  // TorqueDeviceFile
  //
  if (i.TorqueDeviceFile ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "TorqueDeviceFile",
        e));

    s << *i.TorqueDeviceFile ();
  }

  // ComsumerDevice
  //
  if (i.ComsumerDevice ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "ComsumerDevice",
        e));

    s << *i.ComsumerDevice ();
  }

  // ComsumerPort
  //
  if (i.ComsumerPort ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "ComsumerPort",
        e));

    s << *i.ComsumerPort ();
  }

  // EMGAndAngleDevice
  //
  if (i.EMGAndAngleDevice ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "EMGAndAngleDevice",
        e));

    s << *i.EMGAndAngleDevice ();
  }

  // OptimizationDevice
  //
  if (i.OptimizationDevice ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "OptimizationDevice",
        e));

    s << *i.OptimizationDevice ();
  }

  // OptimizationFile
  //
  if (i.OptimizationFile ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "OptimizationFile",
        e));

    s << *i.OptimizationFile ();
  }

  // AngleAndComsumerDevice
  //
  if (i.AngleAndComsumerDevice ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "AngleAndComsumerDevice",
        e));

    s << *i.AngleAndComsumerDevice ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const RealTimeType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // openLoop
  //
  if (i.openLoop ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "openLoop",
        e));

    s << *i.openLoop ();
  }

  // hybrid
  //
  if (i.hybrid ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "hybrid",
        e));

    s << *i.hybrid ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const OnlineType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);
}

void
operator<< (::xercesc::DOMAttr&, const OnlineType&)
{
}

void
operator<< (::xml_schema::list_stream&,
            const OnlineType&)
{
}

void
operator<< (::xercesc::DOMElement& e, const OfflineType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);
}

void
operator<< (::xercesc::DOMAttr&, const OfflineType&)
{
}

void
operator<< (::xml_schema::list_stream&,
            const OfflineType&)
{
}

void
operator<< (::xercesc::DOMElement& e, const CurvechoiceType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // online
  //
  if (i.online ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "online",
        e));

    s << *i.online ();
  }

  // offline
  //
  if (i.offline ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "offline",
        e));

    s << *i.offline ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const TypeType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // openLoop
  //
  if (i.openLoop ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "openLoop",
        e));

    s << *i.openLoop ();
  }

  // hybrid
  //
  if (i.hybrid ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "hybrid",
        e));

    s << *i.hybrid ();
  }

  // realTime
  //
  if (i.realTime ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "realTime",
        e));

    s << *i.realTime ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const NMSModelType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        e));

    s << i.type ();
  }

  // tendon
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "tendon",
        e));

    s << i.tendon ();
  }

  // activation
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "activation",
        e));

    s << i.activation ();
  }

  // curve
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "curve",
        e));

    s << i.curve ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const ElaboratedDoFsType& i)
{
  e << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::string, char >& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const ElaboratedDoFsType& i)
{
  a << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::string, char >& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const ElaboratedDoFsType& i)
{
  l << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::string, char >& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const ExecutionElementType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);
}

void
operator<< (::xercesc::DOMAttr&, const ExecutionElementType&)
{
}

void
operator<< (::xml_schema::list_stream&,
            const ExecutionElementType&)
{
}

void
operator<< (::xercesc::DOMElement& e, const FileType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);
}

void
operator<< (::xercesc::DOMAttr&, const FileType&)
{
}

void
operator<< (::xml_schema::list_stream&,
            const FileType&)
{
}

void
operator<< (::xercesc::DOMElement& e, const LoggingType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // txt
  //
  if (i.txt ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "txt",
        e));

    s << *i.txt ();
  }

  // csv
  //
  if (i.csv ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "csv",
        e));

    s << *i.csv ();
  }

  // mot
  //
  if (i.mot ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "mot",
        e));

    s << *i.mot ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const ExecutionType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // NMSmodel
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "NMSmodel",
        e));

    s << i.NMSmodel ();
  }

  // samplingFrequency
  //
  if (i.samplingFrequency ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "samplingFrequency",
        e));

    s << *i.samplingFrequency ();
  }

  // elaboratedDoFs
  //
  if (i.elaboratedDoFs ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "elaboratedDoFs",
        e));

    s << *i.elaboratedDoFs ();
  }

  // logging
  //
  if (i.logging ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "logging",
        e));

    s << *i.logging ();
  }

  // ConsumerPlugin
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "ConsumerPlugin",
        e));

    s << i.ConsumerPlugin ();
  }

  // NameOfSubject
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "NameOfSubject",
        e));

    s << i.NameOfSubject ();
  }
}

void
execution (::std::ostream& o,
           const ::ExecutionType& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::execution (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
execution (::std::ostream& o,
           const ::ExecutionType& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::execution (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
execution (::std::ostream& o,
           const ::ExecutionType& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::execution (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
execution (::xercesc::XMLFormatTarget& t,
           const ::ExecutionType& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::execution (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
execution (::xercesc::XMLFormatTarget& t,
           const ::ExecutionType& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::execution (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
execution (::xercesc::XMLFormatTarget& t,
           const ::ExecutionType& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::execution (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
execution (::xercesc::DOMDocument& d,
           const ::ExecutionType& s,
           ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "execution" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "execution",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
execution (const ::ExecutionType& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "execution",
      "",
      m, f));

  ::execution (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

